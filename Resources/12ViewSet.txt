ViewSet

Django Rest Framework allows you to combine the logic for a set of 
related views in a single class, called a ViewSet.

There are two main advantages of using a ViewSet over using View class.
    # Repeated logic can be combine into a single class.
    # By using router, we no longer need to deal with wiring up the url conf ourselves.



    ViewSet class

A View Set class is simply a type of class-based View,that does not provide any method
handler such as get() or post(), and instead provides action such as list()

# list() ==> Get all Records.
# retrieve() >===> Get Single Record
# create() ==> Create/Insert Record
# Update() ==> Update Record Completely
# partial_update() ==>Update Record partially.
# destroy()   ===> Delete Record.


code:


from rest_framework import viewsets

class StudentViewSet(viewsets.Viewsets):

    def list(self,request):........

    def create(self,request):........

    def retrieve(self,request,pk=None):........

    def Update(self,request,pk=None):........

    def partial_update(self,request,pk=None):........

    def destroy(self,request,pk=None):..........




    During dispatch, the following attributes are available on the ViewSet:-

        basename = the base to use for the URL names that are created.
        action = the name of the current action (eg list,create).
        detail= boolean indicating if the current action is configured for list or detail
                view.

        suffix = the display suffix for the ViewSet type - mirrors the detail attribute.
        name = the display name for the viewset. The argument is mutually exclusive to suffix.
        description = the display description for the individual view of a viewset.



        ViewSet-URL configured

        form Django.urls import path ,include
        from api import views
        from rest_framework.router import DefaultRouter

        router=DefaultRouter() ===> Creating Default Router Object

        router.register('studentapi',views.StudentViewset,basename='student')

        urlpatterns=[
            path("",include(router.urls))
        ]



        code is in project 12







